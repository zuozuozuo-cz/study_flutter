import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:get/get_core/src/get_main.dart';


class LifecycleTestPage extends StatefulWidget {
  const LifecycleTestPage({super.key});

  @override
  State<LifecycleTestPage> createState() => _LifecycleTestPageState();
}

class _LifecycleTestPageState extends State<LifecycleTestPage> {
  bool isDark = false;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: isDark ? ThemeData.dark() : ThemeData.light(),
      home: TestPage(
        onThemeToggle: () {
          setState(() {
            isDark = !isDark;
          });
        },
      ),
    );
  }
}

class TestPage extends StatefulWidget {
  final VoidCallback onThemeToggle;

  const TestPage({super.key, required this.onThemeToggle});

  @override
  State<TestPage> createState() => _TestPageState();
}

class _TestPageState extends State<TestPage> {
  bool showChild = true;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('flutter ÁîüÂëΩÂë®ÊúüÊºîÁ§∫'),
        centerTitle: true,
      ),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          if (showChild) LifecycleDemoWidget(),
          SizedBox(
            height: 20,
          ),
          ElevatedButton(
              onPressed: () => setState(() {
                    showChild = !showChild;
                  }),
              child: Text(showChild ? 'Âç∏ËΩΩÂ≠êÁªÑ‰ª∂' : 'ÊåÇËΩΩÂ≠êÁªÑ‰ª∂')),
          ElevatedButton(
              onPressed: widget.onThemeToggle,
              child: Text('ÂàáÊç¢ Theme Ëß¶Âèë didChangeDependencies')),
          const SizedBox(height: 16),
        ],
      ),
    );
  }
}

class LifecycleDemoWidget extends StatefulWidget {
  const LifecycleDemoWidget({super.key});

  @override
  State<LifecycleDemoWidget> createState() => _LifecycleDemoWidgetState();
}

class _LifecycleDemoWidgetState extends State<LifecycleDemoWidget> {

  /// widget ÊèíÂÖ•Âà∞ widget Ê†ë‰∏≠Ë∞ÉÁî®Ôºå
  @override
  void initState() {
    super.initState();
    print('üü¢  _LifeCycle ----------> initState');
  }

  /// ‰æùËµñÁöÑ InheritedWidget ÂèëÁîüÂèòÂåñÁöÑÊó∂ÂÄôÔºå‰æãÂ¶ÇÂàáÊç¢‰∏ªÈ¢òÁ≠âÁ≠â
  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    print('üü°  _LifeCycle ----------> didChangeDependencies');
    Theme.of(context);
  }

  @override /// widget ÈáçÂª∫ÁöÑÊó∂ÂÄôÔºåÂ¶ÇÊûúwidget.canUpdateÊñπÊ≥ïËøîÂõû‰∏∫
  void didUpdateWidget(covariant LifecycleDemoWidget oldWidget) {
    super.didUpdateWidget(oldWidget);
    print('üü†  _LifeCycle ----------> didUpdateWidget');
  }

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Text('ÊàëÊòØÂ≠êÁªÑ‰ª∂'),
    );
  }

  @override
  void deactivate() {
    super.deactivate();
    print('üî¥  _LifeCycle ----------> deactivate');
  }

  @override
  void dispose() {
    super.dispose();
    print('‚ö´  _LifeCycle ----------> dispose');
  }
}
